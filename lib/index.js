// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeClassOrm, fs, _,
    __slice = [].slice;

  _ = require('underscore');

  fs = require('fs');

  CoffeeClassOrm = (function() {
    CoffeeClassOrm.where = function(where, options, done) {
      if (!done) {
        done = options;
        options = {};
      }
      return this.select(_.extend(options, {
        where: where
      }), done);
    };

    CoffeeClassOrm.select = function(_arg, done) {
      var columns, join, limit, str, tables, where, where_args, where_clause, where_critera, _ref, _ref1,
        _this = this;
      _ref = _arg != null ? _arg : {}, columns = _ref.columns, tables = _ref.tables, where = _ref.where, join = _ref.join, limit = _ref.limit;
      if (_.isFunction(arguments[0])) {
        done = arguments[0];
      }
      if (_.isArray(join)) {
        _ref1 = join, join = _ref1[0], where_critera = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      }
      if (where_critera == null) {
        where_critera = [];
      }
      if (_.isArray(where)) {
        where_clause = where[0], where_args = 2 <= where.length ? __slice.call(where, 1) : [];
        where_critera.push.apply(where_critera, where_args);
      } else {
        where_clause = _.map(where, function(val, column) {
          where_critera.push(val);
          return "" + column + " = ?";
        }).join(' and ');
      }
      if (_.isArray(columns)) {
        columns = columns.join(', ');
      }
      str = "select " + (columns != null ? columns : '*') + " from " + this.prototype.table_name + "" + (tables != null ? ', ' + tables.join(', ') : '') + "" + (join != null ? ' ' + join : '') + "" + (where != null ? ' where ' + where_clause : '') + "" + (limit != null ? ' limit ' + parseInt(limit) : '') + "     ";
      console.log(str.blue);
      console.log.apply(console, arguments);
      console.log(where_critera);
      return mysql.query(str, where_critera, function(err, results) {
        if (limit === 1 && (results != null)) {
          results = results[0];
        }
        return done(err, results);
      });
    };

    CoffeeClassOrm.drop_table = function(done) {
      var _this = this;
      console.log('Dropping table');
      return mysql.query("DROP TABLE `" + this.table_name + "`", function(err, status) {
        console.log('Dropped table', err, status);
        console.log('Dropped table'.red);
        return done.apply(null, arguments);
      });
    };

    CoffeeClassOrm.recreate_table = function(done) {
      var _this = this;
      return this.db_destroy_table(function() {
        console.log('destroyed table'.red);
        console.log.apply(console, arguments);
        return _this.db_create_table(function() {
          console.log('created table'.green);
          console.log.apply(console, arguments);
          return typeof done === "function" ? done() : void 0;
        });
      });
    };

    CoffeeClassOrm.db_create_table = function(_arg, done) {
      var columns, engine, force, forced, indexes, primary_key, str, _base, _ref,
        _this = this;
      _ref = _arg != null ? _arg : {}, force = _ref.force, engine = _ref.engine;
      if (_.isFunction(arguments[0])) {
        done = arguments[0];
      }
      if (done == null) {
        done = function() {};
      }
      if (engine == null) {
        engine = 'InnoDB';
      }
      if ((_base = this.prototype.columns).id == null) {
        _base.id = {
          type: 'integer',
          primary: true,
          required: true
        };
      }
      primary_key = '';
      columns = _.map(this.prototype.columns, function(_arg1, name) {
        var autoinc, len, primary, required, type, unique, _ref1;
        _ref1 = _arg1 != null ? _arg1 : {}, type = _ref1.type, len = _ref1.len, required = _ref1.required, unique = _ref1.unique, primary = _ref1.primary;
        if (len != null) {
          len = "(" + len + ")";
        } else {
          len = '';
        }
        required = required ? ' not null' : '';
        unique = unique ? ' unique' : '';
        autoinc = primary ? ' auto_increment' : '';
        if (primary) {
          primary_key = name;
        }
        return "`" + name + "` " + type + len + required + autoinc + unique;
      }).join(', \n ');
      indexes = ["PRIMARY KEY ( `" + primary_key + "` )"];
      _.each(this.prototype.unique_indexes, function(_arg1, name) {
        var columns;
        columns = 1 <= _arg1.length ? __slice.call(_arg1, 0) : [];
        columns = _.map(columns, function(cname) {
          return "`" + cname + "`";
        });
        return indexes.push("UNIQUE KEY `" + name + "` (" + (columns.join(', ')) + ")");
      });
      console.log('creating table'.green);
      forced = force ? "DROP TABLE `" + this.prototype.table_name + "` IF EXISTS;" : '';
      return mysql.query(str = "" + forced + " CREATE TABLE IF NOT EXISTS `" + this.prototype.table_name + "` (      " + columns + ",      " + (indexes.join(', ')) + "    ) ENGINE=" + engine + ";", function(err, status) {
        if (err) {
          console.log('err'.red, err);
        }
        if ((status != null ? status.affectedRows : void 0) > 0) {
          console.log('created table'.green);
        }
        console.log(str.blue);
        return typeof done === "function" ? done.apply(null, arguments) : void 0;
      });
    };

    CoffeeClassOrm.prototype.save = function() {
      var values;
      if (!this.values.id) {
        return this.create.apply(this, [this.values].concat(__slice.call(arguments)));
      } else {
        values = _.pick.apply(_, [this.values].concat(__slice.call(_.keys(this.columns))));
        return this.update.apply(this, [{
          where: {
            id: this.values.id
          }
        }, values].concat(__slice.call(arguments)));
      }
    };

    function CoffeeClassOrm(values) {
      this.values = values != null ? values : {};
      this.id = this.values.id;
      _.extend(this, this.instance_methods);
      console.log('created model'.green);
    }

    CoffeeClassOrm.prototype.COLUMN_TYPES = ['integer', 'tinyint', 'float', 'varchar', 'text', 'datetime', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'];

    CoffeeClassOrm.prototype.update = function(options, values, done) {
      var limit, str, values_clause, where, where_args, where_clause, where_critera,
        _this = this;
      where = options.where, limit = options.limit;
      if (_.isFunction(values)) {
        done = values;
        values = options;
        where = {
          id: this.id,
          limit: 1
        };
      }
      _.extend(this.values, values);
      where_critera = [];
      if (_.isArray(values)) {
        values_clause = values[0], where_args = 2 <= values.length ? __slice.call(values, 1) : [];
        where_critera.push.apply(where_critera, where_args);
      } else {
        values_clause = _.map(values, function(val, column) {
          where_critera.push(val);
          return "" + column + " = ?";
        }).join(', ');
      }
      if (_.isArray(where)) {
        where_clause = where[0], where_args = 2 <= where.length ? __slice.call(where, 1) : [];
        where_critera.push(where_args);
      } else {
        where_clause = _.map(where, function(val, column) {
          where_critera.push(val);
          return "" + column + " = ?";
        }).join(' and ');
      }
      str = "update " + this.table_name + " set " + values_clause + "" + (where != null ? ' where ' + where_clause : '') + "" + (limit != null ? ' limit ' + parseInt(limit) : '') + "     ";
      console.log(str);
      console.log(where_critera);
      console.log('query string'.blue);
      return mysql.query(str, where_critera, function(err, results) {
        return done(err, results);
      });
    };

    CoffeeClassOrm.prototype.find = function(id, done) {
      return this.select({
        limit: 1,
        where: {
          id: id
        }
      }, done);
    };

    CoffeeClassOrm.prototype.hasMany = function(Class, _arg) {
      var as;
      as = _arg.as;
      if (this._hasMany == null) {
        this._hasMany = [];
      }
      return this._hasMany.push(arguments);
    };

    CoffeeClassOrm.prototype.describe = function(done) {
      return mysql.query("describe " + this.table_name, done);
    };

    CoffeeClassOrm.prototype.create = function(columns, done) {
      var sql, _i, _ref, _results,
        _this = this;
      mysql.query(sql = "insert into " + this.table_name + " (" + ((_(columns)).keys().join(', ')) + ") values (" + ((_.map((function() {
        _results = [];
        for (var _i = 0, _ref = _.size(columns); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function() {
        return '?';
      })).join(', ')) + ")", (_(columns)).values(), function(err, status) {
        if (err) {
          console.log('error creating'.red);
          console.log(err.red);
        } else {
          _this.id = _this.values.id = status.insertId;
        }
        return done(err, status);
      });
      return console.log(sql, columns);
    };

    return CoffeeClassOrm;

  })();

  module.exports = CoffeeClassOrm;

}).call(this);
